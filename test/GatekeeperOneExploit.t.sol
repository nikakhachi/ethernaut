// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/console.sol";

contract GatekeeperOneExploitTest is Test {
    uint256 goerliFork;

    IGatekeeperOne public constant TARGET =
        IGatekeeperOne(0x058B16339ffd0953c37065747318E1dB7b09Eca6);

    string GOERLI_RPC_URL = vm.envString("GOERLI_RPC_URL");

    function setUp() public {
        goerliFork = vm.createFork(GOERLI_RPC_URL);
        vm.selectFork(goerliFork);
    }

    // function testExploit() public {
    //     vm.expectRevert();
    //     TARGET.enter(0x000000000000abcd);
    //     uint y = 2;
    //     while (gasleft() % 8191 != 0) {
    //         y *= 1;
    //     }
    //     assertEq(gasleft() % 8191, 0);
    // }

    function testKey() public {
        bytes8 _gateKey = 0x00000000a835d886;
        require(
            uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)),
            "GatekeeperOne: invalid gateThree part one"
        );
        require(
            uint32(uint64(_gateKey)) != uint64(_gateKey),
            "GatekeeperOne: invalid gateThree part two"
        );
        require(
            uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)),
            "GatekeeperOne: invalid gateThree part three"
        );
    }
}

interface IGatekeeperOne {
    function enter(bytes8 _gateKey) external returns (bool);
}
